{"version":3,"sources":["ASCIIDonut/ASCIIDonut.jsx","CanvasDonut/CanvasDonut.jsx","App.jsx","index.js"],"names":["ASCIIDonut","useState","toggle","setToggle","donut","setDonut","A","useRef","B","useEffect","intervalID","setInterval","doDonut","clearInterval","b","z","current","cosA","Math","cos","sinA","sin","cosB","sinB","k","j","ct","st","i","sp","cp","h","D","t","x","y","o","N","join","type","onClick","prev","className","ASKIIDonut","canvasRef","doCanvasDonut","ctx","getContext","fillStyle","fillRect","canvas","width","height","ox","oy","ooz","xp","yp","L","ref","App","CanvasDonut","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a65325b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst ASCIIDonut = () => {\n    const [ toggle, setToggle ] = useState(false);\n    const [ donut, setDonut ] = useState('');\n\n    const A = useRef(1);\n    const B = useRef(1);\n\n    useEffect(() => {\n        const intervalID = setInterval(doDonut, 50);\n        if(!toggle) {\n            clearInterval(intervalID)\n        }\n        return () => clearInterval(intervalID);\n    }, [ toggle ])\n\n    const doDonut = () => {\n        let b = [];\n        let z = [];\n        A.current += 0.07;\n        B.current += 0.03;\n        const cosA = Math.cos(A.current);\n        const sinA = Math.sin(A.current);\n        const cosB = Math.cos(B.current);\n        const sinB = Math.sin(B.current);\n\n        for(let k = 0; k < 1760; k++) {\n            b[k] = k % 80 === 79 ? '\\n' : ' ';\n            z[k] = 0;\n        }\n        for(let j = 0; j < 6.28; j += 0.07) { // j <=> theta\n            const ct = Math.cos(j);\n            const st = Math.sin(j);\n            for(let i = 0; i < 6.28; i += 0.02) {   // i <=> phi\n                const sp = Math.sin(i);\n                const cp = Math.cos(i);\n                const h = ct + 2; // R1 + R2*cos(theta)\n                const D = 1 / (sp * h * sinA + st * cosA + 5); // this is 1/z\n                const t = sp * h * cosA - st * sinA; // this is a clever factoring of some of the terms in x' and y'\n\n                const x = 0 | (40 + 30 * D * (cp * h * cosB - t * sinB));\n                const y = 0 | (12 + 15 * D * (cp * h * sinB + t * cosB));\n                const o = x + 80 * y;\n                const N = 0 | (8 * ((st * sinA - sp * ct * cosA) * cosB - sp * ct * sinA - st * cosA - cp * ct * sinB));\n\n                if(y < 22 && y >= 0 && x >= 0 && x < 79 && D > z[o]) {\n                    z[o] = D;\n                    b[o] = '.,-~:;=!*#$@'[N > 0 ? N : 0];\n                }\n            }\n        }\n        setDonut(b.join(''));\n    }\n\n    return (<div>\n        <button type={'button'} onClick={() => setToggle((prev) => !prev)}>Toggle</button>\n        <pre className={'asciiPre'}>{donut}</pre>\n    </div>);\n};\n\nexport default ASCIIDonut;\n","import React, { useState, useEffect, useRef } from 'react';\n\nconst R1 = 1;\nconst R2 = 2;\nconst K1 = 100;\nconst K2 = 5;\n\nconst ASKIIDonut = () => {\n    const [ toggle, setToggle ] = useState(false);\n\n    const A = useRef(1);\n    const B = useRef(1);\n\n    const canvasRef = useRef(null)\n\n    useEffect(() => {\n        const intervalID = setInterval(doCanvasDonut, 50);\n        if(!toggle) {\n            clearInterval(intervalID)\n        }\n        return () => clearInterval(intervalID);\n    }, [ toggle ])\n\n    const doCanvasDonut = () => {\n        const ctx = canvasRef.current.getContext('2d');\n        ctx.fillStyle = '#021340';\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        A.current += 0.07;\n        B.current += 0.03;\n\n        // precompute cosines and sines of A, B, theta, phi, same as before\n        const cosA = Math.cos(A.current);\n        const sinA = Math.sin(A.current);\n        const cosB = Math.cos(B.current);\n        const sinB = Math.sin(B.current);\n        for(let j = 0; j < 6.28; j += 0.3) { // j <=> theta\n            const ct = Math.cos(j); // cosine theta\n            const st = Math.sin(j); // sine theta\n            for(let i = 0; i < 6.28; i += 0.1) {   // i <=> phi\n                const sp = Math.sin(i); // sine phi\n                const cp = Math.cos(i); // cosine phi\n                const ox = R2 + R1 * ct; // object x, y = (R2,0,0) + (R1 cos theta, R1 sin theta, 0)\n                const oy = R1 * st;\n\n                const x = ox * (cosB * cp + sinA * sinB * sp) - oy * cosA * sinB; // final 3D x coordinate\n                const y = ox * (sinB * cp - sinA * cosB * sp) + oy * cosA * cosB; // final 3D y\n                const ooz = 1 / (K2 + cosA * ox * sp + sinA * oy); // one over z\n                const xp = (150 + K1 * ooz * x); // x' = screen space coordinate, translated and scaled to fit our 320x240 canvas element\n                const yp = (75 - K1 * ooz * y); // y' (it's negative here because in our output, positive y goes down but in our 3D space, positive y goes up)\n\n                // luminance, scaled back to 0 to 1\n                const L = 0.7 * (cp * ct * sinB - cosA * ct * sp - sinA * st + cosB * (cosA * st - ct * sinA * sp));\n\n                if(L > 0) {\n                    ctx.fillStyle = 'rgba(255,255,255,' + L + ')';\n                    ctx.fillRect(xp, yp, 1.5, 1.5);\n                }\n            }\n        }\n    }\n\n    return (<div>\n        <button type={'button'} onClick={() => setToggle((prev) => !prev)}>Toggle</button>\n        <div>\n            <canvas ref={canvasRef} className={'canvasDonut'}/>\n        </div>\n\n    </div>);\n};\n\nexport default ASKIIDonut;\n","import './App.css';\nimport ASKIIframe from './ASCIIDonut/ASCIIDonut';\nimport CanvasDonut from './CanvasDonut/CanvasDonut';\n\nfunction App() {\n    return (<div className={'App'}>\n        <h1 className={'asciiLabel'}>ASCII Donut</h1>\n        <ASKIIframe/>\n        <h1>Canvas Donut</h1>\n        <CanvasDonut/>\n    </div>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}